<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="/css/styles.css">
    <title>Dashboard</title>
</head>
<body>
    <div id="parent-container" class="center-absolute">
        <div id="header-container">
            <h1>FSE Chat Room, <%= user.username %>!</h1>
            <!-- Logout Button -->
            <form action="/logout" class="log_out" method="post">
                <input type="submit" value="Logout">
            </form>
        </div>
        <div id="parent-container">
            <div id="posts-container" class="scrollable-div">
                <button id="scrollButton" style="display: none;">Scroll to Bottom</button>
            </div>
        </div>

        <!-- Posting Area -->
        <form id="postForm" action="/posting" method="post">
            <input type="hidden" id="post_user" value="<%= user.username %>">
            <!-- <label for="post_content">Content:</label> -->
            <textarea name="post_content" id="post_content" rows="4" placeholder="Enter Your Message here" required></textarea>
            <div id="button-row">
                <button class="submit" type="submit">Confirm</button>
            </div>
        </form>
    </div>


    <!-- Scrpit area to process auto update without refresh the code -->
    <script>
      // Define a local list to store the ids of rendered posts
      let renderedPosts = [];

      const fetchNewPosts = async () => {
        const response = await fetch('/api/posts');
        const newPosts = await response.json();
        let newPostAdded = false; // Flag a checker if a new post was added

        const postsContainer = document.getElementById('posts-container');
        const scrollButton = document.getElementById('scrollButton');
        
        newPosts.forEach(post => {
          // Only render the post if its id is not in the renderedPosts list
          if (!renderedPosts.includes(post.id)) {
            // A new post will be added, so set the checker to true
            newPostAdded = true;

            const postElement = document.createElement('div');
            postElement.classList.add('post');

            // Format the date and time
            // Create a new date object from the post's timestamp
            const postDate = new Date(post.posted_at);
            const formattedDate = postDate.toLocaleDateString(); // "MM/DD/YYYY"
            const formattedTime = postDate.toLocaleTimeString(); // "HH:MM:SS AM/PM"
            
            // formatting the inner HTML
            postElement.innerHTML = `<h2>${post.post_user}        ${formattedDate} ${formattedTime}</h2><p>${post.post_content}</p>`;
            
            // render new post
            postsContainer.appendChild(postElement);
            // Add the id to the renderedPosts list
            renderedPosts.push(post.id);
          }
        });

        // Automatically scroll to the bottom if a new post was added
        if (newPostAdded) {
            const postsContainer = document.getElementById('posts-container');
            postsContainer.scrollTop = postsContainer.scrollHeight;
        }
      }

      fetchNewPosts(); // Fetch posts immediately after page load
      setInterval(fetchNewPosts, 1000); // Auto Update every 1 second


      // handling posting without refreshing the home page:

      document.getElementById('postForm').addEventListener('submit', function(event) {
        event.preventDefault(); // prevent the form from submitting the default way

        const postUser = document.getElementById('post_user').value;
        const postContent = document.getElementById('post_content').value;
        console.log(postUser)
        console.log(postContent)
        fetch('/posting', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ post_user: postUser, post_content: postContent }) // send the post content
        })
        .then(response => response.json()) // expecting a json response
        .then(json => {console.log(json);
          document.getElementById('post_content').value = ''; // Clear the input box after the server send a confirm(or error) message
          // Scroll to the bottom after setting, AUtoScrool which takes over the scrool button which is implemented before
          const postsContainer = document.getElementById('posts-container');
          postsContainer.scrollTop = postsContainer.scrollHeight;
        })
        .catch(err => console.error('Error:', err));
      });




    </script>

  </body>
</html>
