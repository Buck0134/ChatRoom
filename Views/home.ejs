<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet"href="/css/styles.css">
  </head>
  <head>
    <title>Dashboard</title>
  </head>
  <body>
    <h1>Welcome to the ChatRoom, <%= user.username %>!</h1>

    <!-- Posts Area -->
    <!-- <div class="scrollable-div">
      <% posts.forEach((post) => { %>
        <div class="box">
          <p><%= post.post_user %></p>
          <p>posted: <%= post.post_content %></p>
          <p>at: <%= post.posted_at %></p>
        </div>
      <% }); %>
    </div> -->
    <!-- Container directing to script where auto update is functioning -->
    <!-- <div id="posts-container" class="scrollable-div"></div> -->

    <!-- New way -->
    <!-- Posts Area -->
      <div id="posts-container" class="scrollable-div">
        <!-- <% posts.forEach((post) => { %>
        <div class="post">
            <h2>
              <%= post.post_user %>:
            </h2>
            <p>
              <%= post.post_content %>
            </p>
            <p>at 
              <%= post.posted_at %>
            </p>
        </div>
        <% }); %> -->
    </div>
  


    <!-- Posting Area -->

    <form id="postForm">
      <label for="post_content">Content:</label>
      <input type="text" id="post_content" name="post_content" required>
      <br>
      <button type="submit">Confirm</button>
    </form>    
    
    <!-- Logout Button -->
    <form action="/logout" method="post">
      <input type="submit" value="Logout">
    </form>

    <!-- Scrpit area to process auto update without refresh the code -->
    <script>
      // Define a local list to store the ids of rendered posts
      let renderedPosts = [];

      const fetchNewPosts = async () => {
        const response = await fetch('/api/posts');
        const newPosts = await response.json();

        newPosts.forEach(post => {
          // Only render the post if its id is not in the renderedPosts list
          if (!renderedPosts.includes(post.id)) {
            const postElement = document.createElement('div');
            postElement.classList.add('post');

            // Create a new date object from the post's timestamp
            const postDate = new Date(post.posted_at);

            // Format the date and time
            const formattedDate = postDate.toLocaleDateString(); // e.g., "MM/DD/YYYY"
            const formattedTime = postDate.toLocaleTimeString(); // e.g., "HH:MM:SS AM/PM"
            
            // formatting the inner HTML
            postElement.innerHTML = `<h2>${post.post_user}:</h2><p>${post.post_content}</p><p>at ${formattedDate} ${formattedTime}</p>`;
            document.getElementById('posts-container').appendChild(postElement);

            // Add the id to the renderedPosts list
            renderedPosts.push(post.id);
          }
        });
      }

      fetchNewPosts(); // Fetch posts immediately after page load
      setInterval(fetchNewPosts, 1000); // Auto Update every 1 second

      // handling posting without refreshing the home page:

      document.getElementById('postForm').addEventListener('submit', function(event) {
      event.preventDefault(); // prevent the form from submitting the default way

      const postContent = document.getElementById('post_content').value;

      fetch('/post', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ post_content: postContent }) // send the post content
      })
      .then(response => response.json()) // expecting a json response
      .then(json => console.log(json))
      .catch(err => console.error('Error:', err));
    });



    </script>

  </body>
</html>
